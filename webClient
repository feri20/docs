#add webFlux dependency to your pom first

<dependency>
     <groupId>org.springframework</groupId>
     <artifactId>spring-webflux</artifactId>
     <version>6.0.8</version>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-webflux</artifactId>
   <version>3.0.6</version>
</dependency>

if you are going to call an api inside your service method you need to use WebClient define webClient as aproperty of your service class 
then for each request method use samples below and build your webClient based on your target api the bodyToMono part will return target api response body 
as string.

private WebClient.Builder webclient;

webclient.baseUrl("http://localhost:8080/api")
.build()
.post()
.uri("/test")
.contentType(MediaType.APPLICATION_JSON)
.body(BodyInserters.fromValue(json))
.retrieve()
.bodyToMono(String.class)
.block();

for ssl :
webclient.baseUrl("https://localhost:8080/api")
.clientConnector(new ReactorClientHttpConnector(sslConnection()))
.build()
.get()
.uri("/test")
.retrieve()
.bodyToMono(String.class)
.block();

private HttpClient sslConnection() throws NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException {
        KeyStore trustStore = KeyStore.getInstance("PKCS12");
        String pass = "password";
        trustStore.load(ApiCaller.class.getClassLoader().getResourceAsStream("keystore.p12"), pass.toCharArray());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        SslContext sslContext = SslContextBuilder.forClient()
                .trustManager(InsecureTrustManagerFactory.INSTANCE)
                .build();
        return HttpClient.create()
                .secure(sslSpec -> sslSpec.sslContext(sslContext));
    }
